<div>
  Mouse drag = pan, mousewheel = zoom
</div>

<div id="center">
  <div id="fig"> 
    <script type="text/javascript+protovis"> 

var xdom = [0, 10];
xdom[0] = 0;
xdom[1] = new Date().getTime();

var TOTALPTS = 1000000;
var MAXPTS = 600;

var lblzoom = 0;

var alldata = pv.range(xdom[0], xdom[1], (xdom[1]-xdom[0])/TOTALPTS).map(function(x) {
  var sx = x * 10 / xdom[1];
  return {
    x: x,
    y: Math.sin(sx) + Math.sin(sx*80)*.6 + Math.sin(sx*500)*.4 + Math.random() * .4 + 2
  };
});

function getdata(bnd) {
  var lpts = alldata.length * (bnd[1]-bnd[0]) / (xdom[1]-xdom[0]);
  var smpl = Math.floor(Math.max(1, lpts / MAXPTS));
  console.log("Getting data: ", bnd, "smpl=", smpl);
  
  var retd = [];
  var i = Math.abs(pv.search(alldata, bnd[0], function(p) {return p.x;}));
  i = Math.max(0, i-2);
  var jskip = Math.floor(Math.max(1, smpl/100));
  var wsum = 0;
  while (i < TOTALPTS && alldata[i].x <= bnd[1] || retd.length < 10) {
    wsum = 0;
    for (var j = i; j < i + smpl && j < TOTALPTS; j += jskip) {
      wsum += alldata[j].y;
    }
    retd.push({x:alldata[i].x, y:wsum/smpl*jskip});
    i += smpl;
  }
  //console.log(retd.map(function(p) {return p.x}));
  console.log("Got " + retd.length + " points");
  return retd;
}

/* Sizing and scales. */
var w = 600,
    h = 200,
    kx = w / h,
    ky = 1,
    x = pv.Scale.linear(xdom[0], xdom[1]).range(0, w),
    y = pv.Scale.linear(0, 4.5).range(0, h);
 
/* The root panel. */
var vis = new pv.Panel()
    .width(w)
    .height(h)
    .bottom(20)
    .left(20)
    .right(10)
    .top(5);
 
/* Y-axis and ticks. */
vis.add(pv.Rule)
    .data(y.ticks(10))
    .bottom(y)
    .strokeStyle(function(d) d ? "#eee" : "#000")
    .anchor("left").add(pv.Label)
    .text(y.tickFormat);
 
/* X-axis and ticks. */
vis.add(pv.Rule)
    .data(function() x.ticks())
    .visible(function(d) d)
    .left(x)
    .bottom(-5)
    .height(5)
  .anchor("bottom").add(pv.Label)
    .text(function(t) {
        var d = new Date(t);
        if (lblzoom == 0) {
          return (d.getMonth() + 1) + "/" + (d.getFullYear() + "").substring(2);
        } else if (lblzoom == 1) {
          return (d.getMonth() + 1) + "/" + d.getDate();
        } else if (lblzoom == 2) {
          var m = d.getMinutes() + "";
          if (m.length < 2) {
            m = "0" + m;
          }
          return d.getHours() + ":" + m;
        }
    });
 
/* The area with top line. */
var pnl = vis.add(pv.Panel)
  .overflow("hidden");
var area = pnl.add(pv.Area)
area.data(getdata(xdom))
    .overflow("hidden")
    .bottom(1)
    .left(function(d) x(d.x))
    .height(function(d) y(d.y))
    .fillStyle("rgb(121,173,210)")
    .anchor("top").add(pv.Line)
    .lineWidth(1);
 
vis.add(pv.Panel)
  .events("all")
  .event("mousedown", pv.Behavior.pan().bound(xdom))
  .event("mousewheel", pv.Behavior.zoom(3).bound([0,1]))
  .event("pan", transform)
  .event("zoom", transform);

var T_SECOND = 1000;
var T_MINUTE = T_SECOND*60;
var T_HOUR = T_MINUTE*60;
var T_DAY = T_HOUR*24;
var T_MONTH = T_DAY*30;
var T_YEAR = T_DAY*365;

function transform() {
  var t = this.transform().invert();
  var xw = xdom[1] - xdom[0];
  var bnd = [t.x / w * xw, (t.k + t.x / w) * xw];
  var bndw = bnd[1] - bnd[0];
  console.log("zoom to bound", bnd);
  x.domain(bnd[0], bnd[1]);
  area.data(getdata(bnd));
  
  lblzoom = 0;
  if (bndw < T_YEAR * 2) {
    lblzoom = 1;
  }
  if (bndw < T_DAY * 2) {
    lblzoom = 2;
  }
  console.log("lblzoom", lblzoom);
  
  //y.domain(t.y / h * 2 * ky - ky, (t.k + t.y / h) * 2 * ky - ky);
  vis.render();
}
 
vis.render();

/*
setInterval(function() {
  area.data(getdata());
  vis.render();
},30);
*/
    </script> 
  </div>
</div>